import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JOptionPane;


public class Image {
	BufferedImage image;
	
	public Image(BufferedImage img){
		this.image=img;
	}
	
	public void addText(String s){
		
		// Convert to byte arrays
		byte img[] = image.getBytesFromBufferedImage();
		byte text[] = s.getBytes();
		byte length[]  = bit_conversion(text.length);
		
		// Add the text
		try{
			img = addBytes(img,length,0); // 0 = first position
			img = addBytes(img,text,32); //  4 bytes of space for length: 4bytes*8bit = 32 bits
		}
		catch(Exception e){
			JOptionPane.showMessageDialog(null, 
"Target File cannot hold message!", "Error",JOptionPane.ERROR_MESSAGE);
		}
		
		// Convert to BufferedImage
	    ByteArrayInputStream bais = new ByteArrayInputStream(img);
	    try{
	        BufferedImage bImg=ImageIO.read(bais);
	        this.image=bImg;
	    }catch (IOException e){
	        throw new RuntimeException(e);
	    }
	    
	}
	
	
	private static byte[] addBytes(byte[] init, byte[] toAdd, int offset){
		byte newBytes[]=init;
		if(toAdd.length + offset > init.length){
			throw new IllegalArgumentException("File not long enough!");
		}
		
		for(int i=0; i<toAdd.length; ++i){
			int add = toAdd[i];
			for(int bit=7; bit>=0; --bit, ++offset){
				int b = (add >>> bit) & 1;
				newBytes[offset] = (byte)((init[offset] & 0xFE) | b );
			}
		}
		return init;
	}
	
	private byte[] getEncodedBytes(byte[] image){
		int length = 0;
		int offset = 32;
		for(int i=0; i<32; ++i){
			length = (length << 1) | (image[i] & 1);
		}
		
		byte[] result = new byte[length];

		for(int b=0; b<result.length; ++b ){
			for(int i=0; i<8; ++i, ++offset){
				result[b] = (byte)((result[b] << 1) | (image[offset] & 1));
			}
		}
		return result;
	}
	
	private byte[] getBytesFromBufferedImage(){
		WritableRaster raster   = this.image.getRaster();
		DataBufferByte buffer = (DataBufferByte)raster.getDataBuffer();
		return buffer.getData();	
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*
	 *Handles the addition of text into an image
	 *@param image The image to add hidden text to
	 *@param text     The text to hide in the image
	 *@return Returns the image with the text embedded in it
	 */
	private BufferedImage add_text(BufferedImage image, String text)
	{
		//convert all items to byte arrays: image, message, message length
		byte img[]  = get_byte_data(image);
		byte msg[] = text.getBytes();
		byte len[]   = bit_conversion(msg.length);
		try
		{
			encode_text(img, len,  0); //0 first positiong
			encode_text(img, msg, 32); //4 bytes of space for length: 4bytes*8bit = 32 bits
		}
		catch(Exception e)
		{
			JOptionPane.showMessageDialog(null, 
"Target File cannot hold message!", "Error",JOptionPane.ERROR_MESSAGE);
		}
		return image;
	}
	
	/*
	 *Creates a user space version of a Buffered Image, for editing and saving bytes
	 *@param image The image to put into user space, removes compression interferences
	 *@return The user space version of the supplied image
	 */
	private BufferedImage user_space(BufferedImage image)
	{
		//create new_img with the attributes of image
		BufferedImage new_img  = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
		Graphics2D    graphics = new_img.createGraphics();
		graphics.drawRenderedImage(image, null);
		graphics.dispose(); //release all allocated memory for this image
		return new_img;
	}
	
	/*
	 *Gets the byte array of an image
	 *@param image The image to get byte data from
	 *@return Returns the byte array of the image supplied
	 *@see Raster
	 *@see WritableRaster
	 *@see DataBufferByte
	 */
	private byte[] get_byte_data(BufferedImage image)
	{
		WritableRaster raster   = image.getRaster();
		DataBufferByte buffer = (DataBufferByte)raster.getDataBuffer();
		return buffer.getData();
	}
	
	/*
	 *Gernerates proper byte format of an integer
	 *@param i The integer to convert
	 *@return Returns a byte[4] array converting the supplied integer into bytes
	 */
	private byte[] bit_conversion(int i)
	{
		//originally integers (ints) cast into bytes
		//byte byte7 = (byte)((i & 0xFF00000000000000L) >>> 56);
		//byte byte6 = (byte)((i & 0x00FF000000000000L) >>> 48);
		//byte byte5 = (byte)((i & 0x0000FF0000000000L) >>> 40);
		//byte byte4 = (byte)((i & 0x000000FF00000000L) >>> 32);
		
		//only using 4 bytes
		byte byte3 = (byte)((i & 0xFF000000) >>> 24); //0
		byte byte2 = (byte)((i & 0x00FF0000) >>> 16); //0
		byte byte1 = (byte)((i & 0x0000FF00) >>> 8 ); //0
		byte byte0 = (byte)((i & 0x000000FF)       );
		//{0,0,0,byte0} is equivalent, since all shifts >=8 will be 0
		return(new byte[]{byte3,byte2,byte1,byte0});
	}
	
	/*
	 *Encode an array of bytes into another array of bytes at a supplied offset
	 *@param image     Array of data representing an image
	 *@param addition Array of data to add to the supplied image data array
	 *@param offset      The offset into the image array to add the addition data
	 *@return Returns data Array of merged image and addition data
	 */
	private byte[] encode_text(byte[] image, byte[] addition, int offset)
	{
		//check that the data + offset will fit in the image
		if(addition.length + offset > image.length)
		{
			throw new IllegalArgumentException("File not long enough!");
		}
		//loop through each addition byte
		for(int i=0; i<addition.length; ++i)
		{
			//loop through the 8 bits of each byte
			int add = addition[i];
			for(int bit=7; bit>=0; --bit, ++offset){ //ensure the new offset value carries on through both loops
	
				//assign an integer to b, shifted by bit spaces AND 1
				//a single bit of the current byte
				int b = (add >>> bit) & 1;
				//assign the bit by taking: [(previous byte value) AND 0xfe] OR bit to add
				//changes the last bit of the byte in the image to be the bit of addition
				image[offset] = (byte)((image[offset] & 0xFE) | b );
			}
		}
		return image;
	}
    

	private byte[] decode_text(byte[] image)
	{
		int length = 0;
		int offset = 32;
		for(int i=0; i<32; ++i){
			length = (length << 1) | (image[i] & 1);
		}
		
		byte[] result = new byte[length];

		for(int b=0; b<result.length; ++b ){
			for(int i=0; i<8; ++i, ++offset){
				result[b] = (byte)((result[b] << 1) | (image[offset] & 1));
			}
		}
		return result;
	}
	
	
}
